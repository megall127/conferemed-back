"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const authConfig = {
    guard: 'api',
    guards: {
        api: {
            driver: 'oat',
            tokenProvider: {
                type: 'api',
                driver: 'database',
                table: 'api_tokens',
                foreignKey: 'user_id',
            },
            provider: {
                driver: 'lucid',
                identifierKey: 'id',
                uids: ['email'],
                model: () => Promise.resolve().then(() => __importStar(global[Symbol.for('ioc.use')]('App/Models/User'))),
            },
        },
    },
};
exports.default = authConfig;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXV0aC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImF1dGgudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQWtCQSxNQUFNLFVBQVUsR0FBZTtJQUM3QixLQUFLLEVBQUUsS0FBSztJQUNaLE1BQU0sRUFBRTtRQWNOLEdBQUcsRUFBRTtZQUNILE1BQU0sRUFBRSxLQUFLO1lBZWIsYUFBYSxFQUFFO2dCQUNiLElBQUksRUFBRSxLQUFLO2dCQUNYLE1BQU0sRUFBRSxVQUFVO2dCQUNsQixLQUFLLEVBQUUsWUFBWTtnQkFDbkIsVUFBVSxFQUFFLFNBQVM7YUFDdEI7WUFFRCxRQUFRLEVBQUU7Z0JBU1IsTUFBTSxFQUFFLE9BQU87Z0JBV2YsYUFBYSxFQUFFLElBQUk7Z0JBWW5CLElBQUksRUFBRSxDQUFDLE9BQU8sQ0FBQztnQkFhZixLQUFLLEVBQUUsR0FBRyxFQUFFLHlFQUFRLGlCQUFpQixHQUFDO2FBQ3ZDO1NBQ0Y7S0FDRjtDQUNGLENBQUE7QUFFRCxrQkFBZSxVQUFVLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIENvbmZpZyBzb3VyY2U6IGh0dHBzOi8vZ2l0LmlvL0pZMG1wXG4gKlxuICogRmVlbCBmcmVlIHRvIGxldCB1cyBrbm93IHZpYSBQUiwgaWYgeW91IGZpbmQgc29tZXRoaW5nIGJyb2tlbiBpbiB0aGlzIGNvbmZpZ1xuICogZmlsZS5cbiAqL1xuXG5pbXBvcnQgeyBBdXRoQ29uZmlnIH0gZnJvbSAnQGlvYzpBZG9uaXMvQWRkb25zL0F1dGgnXG5cbi8qXG58LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbnwgQXV0aGVudGljYXRpb24gTWFwcGluZ1xufC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG58XG58IExpc3Qgb2YgYXZhaWxhYmxlIGF1dGhlbnRpY2F0aW9uIG1hcHBpbmcuIFlvdSBtdXN0IGZpcnN0IGRlZmluZSB0aGVtXG58IGluc2lkZSB0aGUgYGNvbnRyYWN0cy9hdXRoLnRzYCBmaWxlIGJlZm9yZSBtZW50aW9uaW5nIHRoZW0gaGVyZS5cbnxcbiovXG5jb25zdCBhdXRoQ29uZmlnOiBBdXRoQ29uZmlnID0ge1xuICBndWFyZDogJ2FwaScsXG4gIGd1YXJkczoge1xuICAgIC8qXG4gICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgfCBPQVQgR3VhcmRcbiAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICB8XG4gICAgfCBPQVQgKE9wYXF1ZSBhY2Nlc3MgdG9rZW5zKSBndWFyZCB1c2VzIGRhdGFiYXNlIGJhY2tlZCB0b2tlbnMgdG8gYXV0aGVudGljYXRlXG4gICAgfCBIVFRQIHJlcXVlc3QuIFRoaXMgZ3VhcmQgRE9FUyBOT1QgcmVseSBvbiBzZXNzaW9ucyBvciBjb29raWVzIGFuZCB1c2VzXG4gICAgfCBBdXRob3JpemF0aW9uIGhlYWRlciB2YWx1ZSBmb3IgYXV0aGVudGljYXRpb24uXG4gICAgfFxuICAgIHwgVXNlIHRoaXMgZ3VhcmQgdG8gYXV0aGVudGljYXRlIG1vYmlsZSBhcHBzIG9yIHdlYiBjbGllbnRzIHRoYXQgY2Fubm90IHJlbHlcbiAgICB8IG9uIGNvb2tpZXMvc2Vzc2lvbnMuXG4gICAgfFxuICAgICovXG4gICAgYXBpOiB7XG4gICAgICBkcml2ZXI6ICdvYXQnLFxuXG4gICAgICAvKlxuICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICB8IFRva2VucyBwcm92aWRlclxuICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICB8XG4gICAgICB8IFVzZXMgU1FMIGRhdGFiYXNlIGZvciBtYW5hZ2luZyB0b2tlbnMuIFVzZSB0aGUgXCJkYXRhYmFzZVwiIGRyaXZlciwgd2hlblxuICAgICAgfCB0b2tlbnMgYXJlIHRoZSBzZWNvbmRhcnkgbW9kZSBvZiBhdXRoZW50aWNhdGlvbi5cbiAgICAgIHwgRm9yIGV4YW1wbGU6IFRoZSBHaXRodWIgcGVyc29uYWwgdG9rZW5zXG4gICAgICB8XG4gICAgICB8IFRoZSBmb3JlaWduS2V5IGNvbHVtbiBpcyB1c2VkIHRvIG1ha2UgdGhlIHJlbGF0aW9uc2hpcCBiZXR3ZWVuIHRoZSB1c2VyXG4gICAgICB8IGFuZCB0aGUgdG9rZW4uIFlvdSBhcmUgZnJlZSB0byB1c2UgYW55IGNvbHVtbiBuYW1lIGhlcmUuXG4gICAgICB8XG4gICAgICAqL1xuICAgICAgdG9rZW5Qcm92aWRlcjoge1xuICAgICAgICB0eXBlOiAnYXBpJyxcbiAgICAgICAgZHJpdmVyOiAnZGF0YWJhc2UnLFxuICAgICAgICB0YWJsZTogJ2FwaV90b2tlbnMnLFxuICAgICAgICBmb3JlaWduS2V5OiAndXNlcl9pZCcsXG4gICAgICB9LFxuXG4gICAgICBwcm92aWRlcjoge1xuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBEcml2ZXJcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBOYW1lIG9mIHRoZSBkcml2ZXJcbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICBkcml2ZXI6ICdsdWNpZCcsXG5cbiAgICAgICAgLypcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHwgSWRlbnRpZmllciBrZXlcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBUaGUgaWRlbnRpZmllciBrZXkgaXMgdGhlIHVuaXF1ZSBrZXkgb24gdGhlIG1vZGVsLiBJbiBtb3N0IGNhc2VzIHNwZWNpZnlpbmdcbiAgICAgICAgfCB0aGUgcHJpbWFyeSBrZXkgaXMgdGhlIHJpZ2h0IGNob2ljZS5cbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICBpZGVudGlmaWVyS2V5OiAnaWQnLFxuXG4gICAgICAgIC8qXG4gICAgICAgIHwtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICB8IFVpZHNcbiAgICAgICAgfC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgIHxcbiAgICAgICAgfCBVaWRzIGFyZSB1c2VkIHRvIHNlYXJjaCBhIHVzZXIgYWdhaW5zdCBvbmUgb2YgdGhlIG1lbnRpb25lZCBjb2x1bW5zLiBEdXJpbmdcbiAgICAgICAgfCBsb2dpbiwgdGhlIGF1dGggbW9kdWxlIHdpbGwgc2VhcmNoIHRoZSB1c2VyIG1lbnRpb25lZCB2YWx1ZSBhZ2FpbnN0IG9uZVxuICAgICAgICB8IG9mIHRoZSBtZW50aW9uZWQgY29sdW1ucyB0byBmaW5kIHRoZWlyIHVzZXIgcmVjb3JkLlxuICAgICAgICB8XG4gICAgICAgICovXG4gICAgICAgIHVpZHM6IFsnZW1haWwnXSxcblxuICAgICAgICAvKlxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfCBNb2RlbFxuICAgICAgICB8LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgfFxuICAgICAgICB8IFRoZSBtb2RlbCB0byB1c2UgZm9yIGZldGNoaW5nIG9yIGZpbmRpbmcgdXNlcnMuIFRoZSBtb2RlbCBpcyBpbXBvcnRlZFxuICAgICAgICB8IGxhemlseSBzaW5jZSB0aGUgY29uZmlnIGZpbGVzIGFyZSByZWFkIHdheSBlYXJsaWVyIGluIHRoZSBsaWZlY3ljbGVcbiAgICAgICAgfCBvZiBib290aW5nIHRoZSBhcHAgYW5kIHRoZSBtb2RlbHMgbWF5IG5vdCBiZSBpbiBhIHVzYWJsZSBzdGF0ZSBhdFxuICAgICAgICB8IHRoYXQgdGltZS5cbiAgICAgICAgfFxuICAgICAgICAqL1xuICAgICAgICBtb2RlbDogKCkgPT4gaW1wb3J0KCdBcHAvTW9kZWxzL1VzZXInKSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfSxcbn1cblxuZXhwb3J0IGRlZmF1bHQgYXV0aENvbmZpZ1xuIl19