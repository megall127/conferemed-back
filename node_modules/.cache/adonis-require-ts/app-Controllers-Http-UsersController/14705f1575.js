"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Proc_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Proc"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class UsersController {
    async create({ request, response }) {
        const user = new User_1.default();
        user.email = request.input('email');
        user.password = request.input('password');
        user.name = request.input('name');
        user.tell = request.input('tell');
        user.crm = request.input('crm');
        user.cidade = request.input('cidade');
        user.cpf = request.input('cpf');
        user.especialit = request.input('especialit');
        user.aux = request.input('aux');
        await user.save();
        return user;
    }
    async login({ auth, request, response }) {
        const email = request.input('email');
        const password = request.input('password');
        try {
            const token = await auth.use('api').attempt(email, password);
            return token;
        }
        catch {
            return response.unauthorized('Invalid credentials');
        }
    }
    async takeDocDados({ auth, request, response }) {
        const check = await auth.use('api').authenticate();
        const user = await User_1.default.findBy('id', request.input('id'));
        let procFilter = [];
        const procFound = (await Proc_1.default.all()).map((itens) => {
            if (itens.users_id === user?.id) {
                procFilter.push(itens);
            }
            else {
            }
        });
        if (check) {
            return {
                data: {
                    doctor: user,
                    proc: procFilter
                }
            };
        }
        else {
            return "Usuário não autenticado.";
        }
    }
    async checkRoute({ auth }) {
        const check = await auth.use('api').authenticate();
        if (check) {
            return 1;
        }
        else {
            return 2;
        }
    }
    async getAllDoctors({ auth }) {
        const user = new User_1.default();
        const check = await auth.use('api').authenticate();
        if (check) {
            return User_1.default.all();
        }
        else {
            return 'Falhou';
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLGlGQUFrQztBQUVsQyxNQUFxQixlQUFlO0lBQ3pCLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFzQjtRQUV6RCxNQUFNLElBQUksR0FBRyxJQUFJLGNBQUksRUFBRSxDQUFBO1FBRXZCLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDekMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDL0IsSUFBSSxDQUFDLE1BQU0sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFFBQVEsQ0FBQyxDQUFBO1FBQ3JDLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMvQixJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDN0MsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBRS9CLE1BQU0sSUFBSSxDQUFDLElBQUksRUFBRSxDQUFBO1FBRWpCLE9BQU8sSUFBSSxDQUFBO0lBQ2YsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFFNUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRzFDLElBQUk7WUFDSixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUMxRCxPQUFPLEtBQUssQ0FBQTtTQUNiO1FBQUMsTUFBTTtZQUNOLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1NBQ3BEO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBdUI7UUFFdkUsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBRWxELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBRXpELElBQUksVUFBVSxHQUFPLEVBQUUsQ0FBQTtRQUV2QixNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQU0sY0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDL0MsSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksRUFBRSxFQUFFLEVBQUM7Z0JBQzNCLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDekI7aUJBQU07YUFFTjtRQUNMLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBRyxLQUFLLEVBQUM7WUFDTCxPQUFPO2dCQUNILElBQUksRUFBRTtvQkFDRixNQUFNLEVBQUUsSUFBSTtvQkFDWixJQUFJLEVBQUUsVUFBVTtpQkFDbkI7YUFFSixDQUFBO1NBQ0o7YUFBTTtZQUNILE9BQU8sMEJBQTBCLENBQUE7U0FDcEM7SUFDTCxDQUFDO0lBR00sS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFDLElBQUksRUFBdUI7UUFFaEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBRWxELElBQUcsS0FBSyxFQUFDO1lBQ0wsT0FBTyxDQUFDLENBQUE7U0FDWDthQUFNO1lBQ0gsT0FBTyxDQUFDLENBQUE7U0FDWDtJQUVMLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsSUFBSSxFQUFzQjtRQUVsRCxNQUFNLElBQUksR0FBRyxJQUFJLGNBQUksRUFBRSxDQUFBO1FBRXZCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUdsRCxJQUFHLEtBQUssRUFBQztZQUNMLE9BQU8sY0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1NBQ3BCO2FBQU07WUFDSCxPQUFPLFFBQVEsQ0FBQTtTQUNsQjtJQUNMLENBQUM7Q0FDSjtBQXpGRCxrQ0F5RkMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuaW1wb3J0IFByb2MgZnJvbSAnQXBwL01vZGVscy9Qcm9jJ1xuaW1wb3J0IFVzZXIgZnJvbSAnQXBwL01vZGVscy9Vc2VyJ1xuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2Vyc0NvbnRyb2xsZXIge1xuICAgIHB1YmxpYyBhc3luYyBjcmVhdGUoIHtyZXF1ZXN0LCByZXNwb25zZX06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcblxuICAgICAgICBjb25zdCB1c2VyID0gbmV3IFVzZXIoKVxuXG4gICAgICAgIHVzZXIuZW1haWwgPSByZXF1ZXN0LmlucHV0KCdlbWFpbCcpXG4gICAgICAgIHVzZXIucGFzc3dvcmQgPSByZXF1ZXN0LmlucHV0KCdwYXNzd29yZCcpXG4gICAgICAgIHVzZXIubmFtZSA9IHJlcXVlc3QuaW5wdXQoJ25hbWUnKVxuICAgICAgICB1c2VyLnRlbGwgPSByZXF1ZXN0LmlucHV0KCd0ZWxsJylcbiAgICAgICAgdXNlci5jcm0gPSByZXF1ZXN0LmlucHV0KCdjcm0nKVxuICAgICAgICB1c2VyLmNpZGFkZSA9IHJlcXVlc3QuaW5wdXQoJ2NpZGFkZScpXG4gICAgICAgIHVzZXIuY3BmID0gcmVxdWVzdC5pbnB1dCgnY3BmJylcbiAgICAgICAgdXNlci5lc3BlY2lhbGl0ID0gcmVxdWVzdC5pbnB1dCgnZXNwZWNpYWxpdCcpXG4gICAgICAgIHVzZXIuYXV4ID0gcmVxdWVzdC5pbnB1dCgnYXV4JylcblxuICAgICAgICBhd2FpdCB1c2VyLnNhdmUoKVxuXG4gICAgICAgIHJldHVybiB1c2VyXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGxvZ2luKHthdXRoLCByZXF1ZXN0LCByZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCkge1xuXG4gICAgICAgIGNvbnN0IGVtYWlsID0gcmVxdWVzdC5pbnB1dCgnZW1haWwnKVxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJylcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdHRlbXB0KGVtYWlsLCBwYXNzd29yZClcbiAgICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnVuYXV0aG9yaXplZCgnSW52YWxpZCBjcmVkZW50aWFscycpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdGFrZURvY0RhZG9zKHsgYXV0aCwgcmVxdWVzdCAsIHJlc3BvbnNlfSA6IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuXG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG5cbiAgICAgICAgY29uc3QgdXNlciA9IGF3YWl0IFVzZXIuZmluZEJ5KCdpZCcsIHJlcXVlc3QuaW5wdXQoJ2lkJykpXG5cbiAgICAgICAgbGV0IHByb2NGaWx0ZXI6YW55ID0gW11cblxuICAgICAgICBjb25zdCBwcm9jRm91bmQgPSAoYXdhaXQgUHJvYy5hbGwoKSkubWFwKChpdGVucykgPT4ge1xuICAgICAgICAgICAgaWYoaXRlbnMudXNlcnNfaWQgPT09IHVzZXI/LmlkKXtcbiAgICAgICAgICAgICAgICBwcm9jRmlsdGVyLnB1c2goaXRlbnMpXG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuICAgICAgICB9KVxuXG4gICAgICAgIGlmKGNoZWNrKXtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgZGF0YToge1xuICAgICAgICAgICAgICAgICAgICBkb2N0b3I6IHVzZXIsXG4gICAgICAgICAgICAgICAgICAgIHByb2M6IHByb2NGaWx0ZXJcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICBcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBcIlVzdcOhcmlvIG7Do28gYXV0ZW50aWNhZG8uXCJcbiAgICAgICAgfSAgIFxuICAgIH1cblxuXG4gICAgcHVibGljIGFzeW5jIGNoZWNrUm91dGUoe2F1dGh9IDogSHR0cENvbnRleHRDb250cmFjdCkge1xuXG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG4gICAgICAgIFxuICAgICAgICBpZihjaGVjayl7XG4gICAgICAgICAgICByZXR1cm4gMSAgICBcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAyXG4gICAgICAgIH1cblxuICAgIH1cblxuICAgIHB1YmxpYyBhc3luYyBnZXRBbGxEb2N0b3JzKHthdXRofTogSHR0cENvbnRleHRDb250cmFjdCl7XG5cbiAgICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKClcblxuICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdXRoZW50aWNhdGUoKVxuXG5cbiAgICAgICAgaWYoY2hlY2spe1xuICAgICAgICAgICAgcmV0dXJuIFVzZXIuYWxsKClcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiAnRmFsaG91J1xuICAgICAgICB9XG4gICAgfVxufVxuIl19