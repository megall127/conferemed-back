"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Proc_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Proc"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class UsersController {
    async create({ request }) {
        const user = new User_1.default();
        user.email = request.input('email');
        user.password = request.input('password');
        user.name = request.input('name');
        user.tell = request.input('tell');
        user.crm = request.input('crm');
        user.cidade = request.input('cidade');
        user.cpf = request.input('cpf');
        user.especialit = request.input('especialit');
        user.aux = request.input('aux');
        await user.save();
        return user;
    }
    async login({ auth, request, response }) {
        const email = request.input('email');
        const password = request.input('password');
        try {
            const token = await auth.use('api').attempt(email, password);
            return {
                token: token,
                user: auth.user
            };
        }
        catch {
            return response.unauthorized('Invalid credentials');
        }
    }
    async takeDocDados({ auth, request }) {
        const check = await auth.use('api').authenticate();
        const user = await User_1.default.findBy('id', request.input('id'));
        let procFilter = [];
        const procFound = (await Proc_1.default.all()).map((itens) => {
            if (itens.users_id === user?.id) {
                procFilter.push(itens);
            }
            else {
            }
        });
        if (check) {
            return {
                data: {
                    doctor: user,
                    proc: procFilter
                }
            };
        }
        else {
            return "Usuário não autenticado.";
        }
    }
    async checkRoute({ auth }) {
        const check = await auth.use('api').authenticate();
        if (check) {
            return 1;
        }
        else {
            return 2;
        }
    }
    async getAllDoctors({ auth }) {
        const check = await auth.use('api').authenticate();
        if (check) {
            return User_1.default.all();
        }
        else {
            return 'Falhou';
        }
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLGlGQUFrQztBQUVsQyxNQUFxQixlQUFlO0lBQ3pCLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBQyxPQUFPLEVBQXNCO1FBRS9DLE1BQU0sSUFBSSxHQUFHLElBQUksY0FBSSxFQUFFLENBQUE7UUFFdkIsSUFBSSxDQUFDLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ25DLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtRQUN6QyxJQUFJLENBQUMsSUFBSSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUE7UUFDakMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLElBQUksQ0FBQyxHQUFHLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUMvQixJQUFJLENBQUMsTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLENBQUE7UUFDckMsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUM3QyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFL0IsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7UUFFakIsT0FBTyxJQUFJLENBQUE7SUFDZixDQUFDO0lBRU0sS0FBSyxDQUFDLEtBQUssQ0FBQyxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUUsUUFBUSxFQUFxQjtRQUU1RCxNQUFNLEtBQUssR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE9BQU8sQ0FBQyxDQUFBO1FBQ3BDLE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFHMUMsSUFBSTtZQUNKLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFBO1lBQzFELE9BQU87Z0JBQ0wsS0FBSyxFQUFFLEtBQUs7Z0JBQ1osSUFBSSxFQUFFLElBQUksQ0FBQyxJQUFJO2FBQ2hCLENBQUE7U0FDRjtRQUFDLE1BQU07WUFDTixPQUFPLFFBQVEsQ0FBQyxZQUFZLENBQUMscUJBQXFCLENBQUMsQ0FBQTtTQUNwRDtJQUNMLENBQUM7SUFFTSxLQUFLLENBQUMsWUFBWSxDQUFDLEVBQUUsSUFBSSxFQUFFLE9BQU8sRUFBd0I7UUFFN0QsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBRWxELE1BQU0sSUFBSSxHQUFHLE1BQU0sY0FBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBRXpELElBQUksVUFBVSxHQUFPLEVBQUUsQ0FBQTtRQUV2QixNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQU0sY0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDL0MsSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksRUFBRSxFQUFFLEVBQUM7Z0JBQzNCLFVBQVUsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUE7YUFDekI7aUJBQU07YUFFTjtRQUNMLENBQUMsQ0FBQyxDQUFBO1FBRUYsSUFBRyxLQUFLLEVBQUM7WUFDTCxPQUFPO2dCQUNILElBQUksRUFBRTtvQkFDRixNQUFNLEVBQUUsSUFBSTtvQkFDWixJQUFJLEVBQUUsVUFBVTtpQkFDbkI7YUFFSixDQUFBO1NBQ0o7YUFBTTtZQUNILE9BQU8sMEJBQTBCLENBQUE7U0FDcEM7SUFDTCxDQUFDO0lBR00sS0FBSyxDQUFDLFVBQVUsQ0FBQyxFQUFDLElBQUksRUFBdUI7UUFFaEQsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBRWxELElBQUcsS0FBSyxFQUFDO1lBQ0wsT0FBTyxDQUFDLENBQUE7U0FDWDthQUFNO1lBQ0gsT0FBTyxDQUFDLENBQUE7U0FDWDtJQUVMLENBQUM7SUFFTSxLQUFLLENBQUMsYUFBYSxDQUFDLEVBQUMsSUFBSSxFQUFzQjtRQUdsRCxNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsWUFBWSxFQUFFLENBQUE7UUFHbEQsSUFBRyxLQUFLLEVBQUM7WUFDTCxPQUFPLGNBQUksQ0FBQyxHQUFHLEVBQUUsQ0FBQTtTQUNwQjthQUFNO1lBQ0gsT0FBTyxRQUFRLENBQUE7U0FDbEI7SUFDTCxDQUFDO0NBQ0o7QUEzRkQsa0NBMkZDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcclxuaW1wb3J0IFByb2MgZnJvbSAnQXBwL01vZGVscy9Qcm9jJ1xyXG5pbXBvcnQgVXNlciBmcm9tICdBcHAvTW9kZWxzL1VzZXInXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVc2Vyc0NvbnRyb2xsZXIge1xyXG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZSgge3JlcXVlc3R9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBuZXcgVXNlcigpXHJcblxyXG4gICAgICAgIHVzZXIuZW1haWwgPSByZXF1ZXN0LmlucHV0KCdlbWFpbCcpXHJcbiAgICAgICAgdXNlci5wYXNzd29yZCA9IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJylcclxuICAgICAgICB1c2VyLm5hbWUgPSByZXF1ZXN0LmlucHV0KCduYW1lJylcclxuICAgICAgICB1c2VyLnRlbGwgPSByZXF1ZXN0LmlucHV0KCd0ZWxsJylcclxuICAgICAgICB1c2VyLmNybSA9IHJlcXVlc3QuaW5wdXQoJ2NybScpXHJcbiAgICAgICAgdXNlci5jaWRhZGUgPSByZXF1ZXN0LmlucHV0KCdjaWRhZGUnKVxyXG4gICAgICAgIHVzZXIuY3BmID0gcmVxdWVzdC5pbnB1dCgnY3BmJylcclxuICAgICAgICB1c2VyLmVzcGVjaWFsaXQgPSByZXF1ZXN0LmlucHV0KCdlc3BlY2lhbGl0JylcclxuICAgICAgICB1c2VyLmF1eCA9IHJlcXVlc3QuaW5wdXQoJ2F1eCcpXHJcblxyXG4gICAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpXHJcblxyXG4gICAgICAgIHJldHVybiB1c2VyXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGxvZ2luKHthdXRoLCByZXF1ZXN0LCByZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCkge1xyXG5cclxuICAgICAgICBjb25zdCBlbWFpbCA9IHJlcXVlc3QuaW5wdXQoJ2VtYWlsJylcclxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJylcclxuICAgICAgICBcclxuICAgICAgICBcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHRva2VuID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF0dGVtcHQoZW1haWwsIHBhc3N3b3JkKVxyXG4gICAgICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgICAgdG9rZW46IHRva2VuLFxyXG4gICAgICAgICAgICB1c2VyOiBhdXRoLnVzZXJcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IGNhdGNoIHtcclxuICAgICAgICAgIHJldHVybiByZXNwb25zZS51bmF1dGhvcml6ZWQoJ0ludmFsaWQgY3JlZGVudGlhbHMnKVxyXG4gICAgICAgIH1cclxuICAgIH1cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgdGFrZURvY0RhZG9zKHsgYXV0aCwgcmVxdWVzdCB9IDogSHR0cENvbnRleHRDb250cmFjdCl7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXHJcblxyXG4gICAgICAgIGNvbnN0IHVzZXIgPSBhd2FpdCBVc2VyLmZpbmRCeSgnaWQnLCByZXF1ZXN0LmlucHV0KCdpZCcpKVxyXG5cclxuICAgICAgICBsZXQgcHJvY0ZpbHRlcjphbnkgPSBbXVxyXG5cclxuICAgICAgICBjb25zdCBwcm9jRm91bmQgPSAoYXdhaXQgUHJvYy5hbGwoKSkubWFwKChpdGVucykgPT4ge1xyXG4gICAgICAgICAgICBpZihpdGVucy51c2Vyc19pZCA9PT0gdXNlcj8uaWQpe1xyXG4gICAgICAgICAgICAgICAgcHJvY0ZpbHRlci5wdXNoKGl0ZW5zKVxyXG4gICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9KVxyXG5cclxuICAgICAgICBpZihjaGVjayl7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgICBkYXRhOiB7XHJcbiAgICAgICAgICAgICAgICAgICAgZG9jdG9yOiB1c2VyLFxyXG4gICAgICAgICAgICAgICAgICAgIHByb2M6IHByb2NGaWx0ZXJcclxuICAgICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICAgXHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJVc3XDoXJpbyBuw6NvIGF1dGVudGljYWRvLlwiXHJcbiAgICAgICAgfSAgIFxyXG4gICAgfVxyXG5cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgY2hlY2tSb3V0ZSh7YXV0aH0gOiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XHJcblxyXG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXHJcbiAgICAgICAgXHJcbiAgICAgICAgaWYoY2hlY2spe1xyXG4gICAgICAgICAgICByZXR1cm4gMSAgICBcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gMlxyXG4gICAgICAgIH1cclxuXHJcbiAgICB9XHJcblxyXG4gICAgcHVibGljIGFzeW5jIGdldEFsbERvY3RvcnMoe2F1dGh9OiBIdHRwQ29udGV4dENvbnRyYWN0KXtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXHJcblxyXG5cclxuICAgICAgICBpZihjaGVjayl7XHJcbiAgICAgICAgICAgIHJldHVybiBVc2VyLmFsbCgpXHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgcmV0dXJuICdGYWxob3UnXHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG59XHJcbiJdfQ==