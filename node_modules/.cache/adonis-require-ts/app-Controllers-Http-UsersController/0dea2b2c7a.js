"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Proc_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Proc"));
const User_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/User"));
class UsersController {
    async create({ request, response }) {
        const user = new User_1.default();
        user.email = request.input('email');
        user.password = request.input('password');
        user.name = request.input('name');
        user.tell = request.input('tell');
        user.crm = request.input('crm');
        user.cpf = request.input('cpf');
        user.especialit = request.input('especialit');
        user.aux = request.input('aux');
        await user.save();
    }
    async login({ auth, request, response }) {
        const email = request.input('email');
        const password = request.input('password');
        try {
            const token = await auth.use('api').attempt(email, password);
            return token;
        }
        catch {
            return response.unauthorized('Invalid credentials');
        }
    }
    async takeDocDados({ auth, request, response }) {
        const check = await auth.use('api').authenticate();
        let procFilter = [];
        const procFound = (await Proc_1.default.all()).map((itens) => {
            if (itens.users_id === auth.user?.id) {
                procFilter.push(itens);
            }
            else {
            }
        });
        if (check) {
            return {
                data: {
                    doctor: auth.user,
                    proc: procFilter
                }
            };
        }
        else {
            return "Usuário não autenticado.";
        }
    }
    async getAllDoctors({}) {
    }
}
exports.default = UsersController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiVXNlcnNDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiVXNlcnNDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQ0EsaUZBQWtDO0FBQ2xDLGlGQUFrQztBQUVsQyxNQUFxQixlQUFlO0lBQ3pCLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBQyxPQUFPLEVBQUUsUUFBUSxFQUFzQjtRQUV6RCxNQUFNLElBQUksR0FBRyxJQUFJLGNBQUksRUFBRSxDQUFBO1FBRXZCLElBQUksQ0FBQyxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNuQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDekMsSUFBSSxDQUFDLElBQUksR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFBO1FBQ2pDLElBQUksQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsQ0FBQTtRQUNqQyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFDL0IsSUFBSSxDQUFDLEdBQUcsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQy9CLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUM3QyxJQUFJLENBQUMsR0FBRyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUE7UUFFL0IsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7SUFDckIsQ0FBQztJQUVNLEtBQUssQ0FBQyxLQUFLLENBQUMsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBcUI7UUFFNUQsTUFBTSxLQUFLLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQTtRQUNwQyxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBRzFDLElBQUk7WUFDSixNQUFNLEtBQUssR0FBRyxNQUFNLElBQUksQ0FBQyxHQUFHLENBQUMsS0FBSyxDQUFDLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxRQUFRLENBQUMsQ0FBQTtZQUMxRCxPQUFPLEtBQUssQ0FBQTtTQUNiO1FBQUMsTUFBTTtZQUNOLE9BQU8sUUFBUSxDQUFDLFlBQVksQ0FBQyxxQkFBcUIsQ0FBQyxDQUFBO1NBQ3BEO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxZQUFZLENBQUMsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFHLFFBQVEsRUFBdUI7UUFFdkUsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBRWxELElBQUksVUFBVSxHQUFPLEVBQUUsQ0FBQTtRQUV2QixNQUFNLFNBQVMsR0FBRyxDQUFDLE1BQU0sY0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxFQUFFLEVBQUU7WUFDL0MsSUFBRyxLQUFLLENBQUMsUUFBUSxLQUFLLElBQUksQ0FBQyxJQUFJLEVBQUUsRUFBRSxFQUFDO2dCQUNoQyxVQUFVLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFBO2FBQ3pCO2lCQUFNO2FBRU47UUFDTCxDQUFDLENBQUMsQ0FBQTtRQUVGLElBQUcsS0FBSyxFQUFDO1lBQ0wsT0FBTztnQkFDSCxJQUFJLEVBQUU7b0JBQ0YsTUFBTSxFQUFFLElBQUksQ0FBQyxJQUFJO29CQUNqQixJQUFJLEVBQUUsVUFBVTtpQkFDbkI7YUFFSixDQUFBO1NBQ0o7YUFBTTtZQUNILE9BQU8sMEJBQTBCLENBQUE7U0FDcEM7SUFDTCxDQUFDO0lBRU0sS0FBSyxDQUFDLGFBQWEsQ0FBQyxFQUF1QjtJQUVsRCxDQUFDO0NBQ0o7QUE3REQsa0NBNkRDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUgeyBIdHRwQ29udGV4dENvbnRyYWN0IH0gZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9IdHRwQ29udGV4dCdcbmltcG9ydCBQcm9jIGZyb20gJ0FwcC9Nb2RlbHMvUHJvYydcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcidcblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVXNlcnNDb250cm9sbGVyIHtcbiAgICBwdWJsaWMgYXN5bmMgY3JlYXRlKCB7cmVxdWVzdCwgcmVzcG9uc2V9OiBIdHRwQ29udGV4dENvbnRyYWN0KSB7XG5cbiAgICAgICAgY29uc3QgdXNlciA9IG5ldyBVc2VyKClcblxuICAgICAgICB1c2VyLmVtYWlsID0gcmVxdWVzdC5pbnB1dCgnZW1haWwnKVxuICAgICAgICB1c2VyLnBhc3N3b3JkID0gcmVxdWVzdC5pbnB1dCgncGFzc3dvcmQnKVxuICAgICAgICB1c2VyLm5hbWUgPSByZXF1ZXN0LmlucHV0KCduYW1lJylcbiAgICAgICAgdXNlci50ZWxsID0gcmVxdWVzdC5pbnB1dCgndGVsbCcpXG4gICAgICAgIHVzZXIuY3JtID0gcmVxdWVzdC5pbnB1dCgnY3JtJylcbiAgICAgICAgdXNlci5jcGYgPSByZXF1ZXN0LmlucHV0KCdjcGYnKVxuICAgICAgICB1c2VyLmVzcGVjaWFsaXQgPSByZXF1ZXN0LmlucHV0KCdlc3BlY2lhbGl0JylcbiAgICAgICAgdXNlci5hdXggPSByZXF1ZXN0LmlucHV0KCdhdXgnKVxuXG4gICAgICAgIGF3YWl0IHVzZXIuc2F2ZSgpXG4gICAgfVxuXG4gICAgcHVibGljIGFzeW5jIGxvZ2luKHthdXRoLCByZXF1ZXN0LCByZXNwb25zZX06SHR0cENvbnRleHRDb250cmFjdCkge1xuXG4gICAgICAgIGNvbnN0IGVtYWlsID0gcmVxdWVzdC5pbnB1dCgnZW1haWwnKVxuICAgICAgICBjb25zdCBwYXNzd29yZCA9IHJlcXVlc3QuaW5wdXQoJ3Bhc3N3b3JkJylcbiAgICAgICAgXG4gICAgICAgIFxuICAgICAgICB0cnkge1xuICAgICAgICBjb25zdCB0b2tlbiA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdHRlbXB0KGVtYWlsLCBwYXNzd29yZClcbiAgICAgICAgICByZXR1cm4gdG9rZW5cbiAgICAgICAgfSBjYXRjaCB7XG4gICAgICAgICAgcmV0dXJuIHJlc3BvbnNlLnVuYXV0aG9yaXplZCgnSW52YWxpZCBjcmVkZW50aWFscycpXG4gICAgICAgIH1cbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgdGFrZURvY0RhZG9zKHsgYXV0aCwgcmVxdWVzdCAsIHJlc3BvbnNlfSA6IEh0dHBDb250ZXh0Q29udHJhY3Qpe1xuXG4gICAgICAgIGNvbnN0IGNoZWNrID0gYXdhaXQgYXV0aC51c2UoJ2FwaScpLmF1dGhlbnRpY2F0ZSgpXG5cbiAgICAgICAgbGV0IHByb2NGaWx0ZXI6YW55ID0gW11cblxuICAgICAgICBjb25zdCBwcm9jRm91bmQgPSAoYXdhaXQgUHJvYy5hbGwoKSkubWFwKChpdGVucykgPT4ge1xuICAgICAgICAgICAgaWYoaXRlbnMudXNlcnNfaWQgPT09IGF1dGgudXNlcj8uaWQpe1xuICAgICAgICAgICAgICAgIHByb2NGaWx0ZXIucHVzaChpdGVucylcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0pXG5cbiAgICAgICAgaWYoY2hlY2spe1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgIGRvY3RvcjogYXV0aC51c2VyLFxuICAgICAgICAgICAgICAgICAgICBwcm9jOiBwcm9jRmlsdGVyXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gXCJVc3XDoXJpbyBuw6NvIGF1dGVudGljYWRvLlwiXG4gICAgICAgIH0gICBcbiAgICB9XG5cbiAgICBwdWJsaWMgYXN5bmMgZ2V0QWxsRG9jdG9ycyh7fTogSHR0cENvbnRleHRDb250cmFjdCl7XG4gICAgICAgIFxuICAgIH1cbn1cbiJdfQ==