"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Proc_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Proc"));
class ProcsController {
    async create({ request, auth }) {
        const proc = new Proc_1.default();
        const check = await auth.use('api').authenticate();
        if (check) {
            proc.clinica = request.input('clinica');
            proc.convenio = request.input('convenio');
            proc.nome_paciente = request.input('nome_paciente');
            proc.nome_proc = request.input('nome_proc');
            proc.solicitante = request.input('solicitante');
            proc.executante = request.input('executante');
            proc.valor_repasse = request.input('valor_repasse');
            proc.quantidade = request.input('quantidade');
            proc.valor_auxiliar = request.input('valor_auxiliar');
            proc.date_pag = request.input('date_pag');
            proc.valor_proc = request.input('valor_proc');
            proc.stats_proc = request.input('stats_proc');
            proc.stats_pay = request.input('stats_pay');
            proc.date_proc = request.input('date_proc');
            proc.users_id = request.input('id');
            await proc.save();
        }
        else {
            return "Nao deu";
        }
    }
    async editDados({ auth, request }) {
        const proc = await Proc_1.default.findOrFail(request.input("id"));
        const newStats = request.input("newStats");
        const newPayment = request.input("newPayment");
        const newDate = request.input("newDate");
        const checkValue = (newValue, value) => {
            if (newValue === null) {
                return value;
            }
            else {
                return newValue;
            }
        };
        try {
            await auth.check();
            proc.stats_proc = checkValue(newStats, proc.stats_proc);
            proc.stats_pay = checkValue(newPayment, proc.stats_pay);
            proc.date_pag = checkValue(newDate, proc.date_pag);
            await proc?.save();
            return {
                message: "Editado com Sucesso!",
                data: newStats
            };
        }
        catch (error) {
            return {
                message: "Falhou"
            };
        }
    }
    async getAll({ auth, request }) {
        const check = await auth.use('api').authenticate();
        if (check) {
            return Proc_1.default.all();
        }
        else {
            return "NÃ£o autorizado.";
        }
    }
}
exports.default = ProcsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvY3NDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUHJvY3NDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsaUZBQWtDO0FBR2xDLE1BQXFCLGVBQWU7SUFHekIsS0FBSyxDQUFDLE1BQU0sQ0FBRSxFQUFDLE9BQU8sRUFBRSxJQUFJLEVBQXNCO1FBRXpELE1BQU0sSUFBSSxHQUFHLElBQUksY0FBSSxFQUFFLENBQUM7UUFFeEIsTUFBTSxLQUFLLEdBQUcsTUFBTSxJQUFJLENBQUMsR0FBRyxDQUFDLEtBQUssQ0FBQyxDQUFDLFlBQVksRUFBRSxDQUFBO1FBRWxELElBQUcsS0FBSyxFQUFDO1lBQ0wsSUFBSSxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxDQUFBO1lBQ3ZDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQTtZQUN6QyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUE7WUFDbkQsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQzNDLElBQUksQ0FBQyxXQUFXLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxhQUFhLENBQUMsQ0FBQTtZQUMvQyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDN0MsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQ25ELElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUM3QyxJQUFJLENBQUMsY0FBYyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsZ0JBQWdCLENBQUMsQ0FBQTtZQUNyRCxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDekMsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQzdDLElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUM3QyxJQUFJLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsV0FBVyxDQUFDLENBQUE7WUFDM0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQzNDLElBQUksQ0FBQyxRQUFRLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQTtZQUVuQyxNQUFNLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQTtTQUNwQjthQUFNO1lBQ0gsT0FBTyxTQUFTLENBQUE7U0FDbkI7SUFBQSxDQUFDO0lBR0ssS0FBSyxDQUFDLFNBQVMsQ0FBRSxFQUFDLElBQUksRUFBRSxPQUFPLEVBQUU7UUFFcEMsTUFBTSxJQUFJLEdBQUcsTUFBTSxjQUFJLENBQUMsVUFBVSxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQTtRQUV2RCxNQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFBO1FBQzFDLE1BQU0sVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7UUFDOUMsTUFBTSxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtRQUd4QyxNQUFNLFVBQVUsR0FBRyxDQUFDLFFBQWEsRUFBRSxLQUFVLEVBQUUsRUFBRTtZQUM3QyxJQUFHLFFBQVEsS0FBSyxJQUFJLEVBQUM7Z0JBQ2pCLE9BQU8sS0FBSyxDQUFBO2FBQ2Y7aUJBQU07Z0JBQ0gsT0FBTyxRQUFRLENBQUE7YUFDbEI7UUFDTCxDQUFDLENBQUE7UUFFRCxJQUFJO1lBQ0EsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hELElBQUksQ0FBQyxRQUFRLEdBQUcsVUFBVSxDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMsUUFBUSxDQUFDLENBQUM7WUFFbkQsTUFBTSxJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUE7WUFFbEIsT0FBTTtnQkFDRixPQUFPLEVBQUUsc0JBQXNCO2dCQUMvQixJQUFJLEVBQUUsUUFBUTthQUNqQixDQUFBO1NBQ0o7UUFBQyxPQUFPLEtBQUssRUFBRTtZQUNaLE9BQU07Z0JBQ0YsT0FBTyxFQUFFLFFBQVE7YUFDcEIsQ0FBQTtTQUNKO0lBQ0wsQ0FBQztJQUVNLEtBQUssQ0FBQyxNQUFNLENBQUUsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFO1FBRWpDLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQztRQUduRCxJQUFHLEtBQUssRUFBQztZQUNMLE9BQU8sY0FBSSxDQUFDLEdBQUcsRUFBRSxDQUFBO1NBQ3BCO2FBQU07WUFDSCxPQUFPLGlCQUFpQixDQUFBO1NBQzNCO0lBRUwsQ0FBQztDQUdKO0FBbEZELGtDQWtGQyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB0eXBlIHsgSHR0cENvbnRleHRDb250cmFjdCB9IGZyb20gJ0Bpb2M6QWRvbmlzL0NvcmUvSHR0cENvbnRleHQnXHJcblxyXG5pbXBvcnQgUHJvYyBmcm9tIFwiQXBwL01vZGVscy9Qcm9jXCJcclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQcm9jc0NvbnRyb2xsZXIge1xyXG5cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgY3JlYXRlKCB7cmVxdWVzdCwgYXV0aH06IEh0dHBDb250ZXh0Q29udHJhY3QpIHtcclxuXHJcbiAgICBjb25zdCBwcm9jID0gbmV3IFByb2MoKTtcclxuXHJcbiAgICBjb25zdCBjaGVjayA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdXRoZW50aWNhdGUoKVxyXG5cclxuICAgIGlmKGNoZWNrKXtcclxuICAgICAgICBwcm9jLmNsaW5pY2EgPSByZXF1ZXN0LmlucHV0KCdjbGluaWNhJylcclxuICAgICAgICBwcm9jLmNvbnZlbmlvID0gcmVxdWVzdC5pbnB1dCgnY29udmVuaW8nKVxyXG4gICAgICAgIHByb2Mubm9tZV9wYWNpZW50ZSA9IHJlcXVlc3QuaW5wdXQoJ25vbWVfcGFjaWVudGUnKVxyXG4gICAgICAgIHByb2Mubm9tZV9wcm9jID0gcmVxdWVzdC5pbnB1dCgnbm9tZV9wcm9jJylcclxuICAgICAgICBwcm9jLnNvbGljaXRhbnRlID0gcmVxdWVzdC5pbnB1dCgnc29saWNpdGFudGUnKVxyXG4gICAgICAgIHByb2MuZXhlY3V0YW50ZSA9IHJlcXVlc3QuaW5wdXQoJ2V4ZWN1dGFudGUnKVxyXG4gICAgICAgIHByb2MudmFsb3JfcmVwYXNzZSA9IHJlcXVlc3QuaW5wdXQoJ3ZhbG9yX3JlcGFzc2UnKVxyXG4gICAgICAgIHByb2MucXVhbnRpZGFkZSA9IHJlcXVlc3QuaW5wdXQoJ3F1YW50aWRhZGUnKVxyXG4gICAgICAgIHByb2MudmFsb3JfYXV4aWxpYXIgPSByZXF1ZXN0LmlucHV0KCd2YWxvcl9hdXhpbGlhcicpXHJcbiAgICAgICAgcHJvYy5kYXRlX3BhZyA9IHJlcXVlc3QuaW5wdXQoJ2RhdGVfcGFnJylcclxuICAgICAgICBwcm9jLnZhbG9yX3Byb2MgPSByZXF1ZXN0LmlucHV0KCd2YWxvcl9wcm9jJylcclxuICAgICAgICBwcm9jLnN0YXRzX3Byb2MgPSByZXF1ZXN0LmlucHV0KCdzdGF0c19wcm9jJylcclxuICAgICAgICBwcm9jLnN0YXRzX3BheSA9IHJlcXVlc3QuaW5wdXQoJ3N0YXRzX3BheScpXHJcbiAgICAgICAgcHJvYy5kYXRlX3Byb2MgPSByZXF1ZXN0LmlucHV0KCdkYXRlX3Byb2MnKVxyXG4gICAgICAgIHByb2MudXNlcnNfaWQgPSByZXF1ZXN0LmlucHV0KCdpZCcpXHJcbiAgICAgICAgXHJcbiAgICAgICAgYXdhaXQgcHJvYy5zYXZlKClcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIFwiTmFvIGRldVwiXHJcbiAgICB9fVxyXG5cclxuXHJcbiAgICBwdWJsaWMgYXN5bmMgZWRpdERhZG9zKCB7YXV0aCwgcmVxdWVzdCB9KXtcclxuXHJcbiAgICAgICAgY29uc3QgcHJvYyA9IGF3YWl0IFByb2MuZmluZE9yRmFpbChyZXF1ZXN0LmlucHV0KFwiaWRcIikpXHJcblxyXG4gICAgICAgIGNvbnN0IG5ld1N0YXRzID0gcmVxdWVzdC5pbnB1dChcIm5ld1N0YXRzXCIpXHJcbiAgICAgICAgY29uc3QgbmV3UGF5bWVudCA9IHJlcXVlc3QuaW5wdXQoXCJuZXdQYXltZW50XCIpXHJcbiAgICAgICAgY29uc3QgbmV3RGF0ZSA9IHJlcXVlc3QuaW5wdXQoXCJuZXdEYXRlXCIpXHJcblxyXG5cclxuICAgICAgICBjb25zdCBjaGVja1ZhbHVlID0gKG5ld1ZhbHVlOiBhbnksIHZhbHVlOiBhbnkpID0+IHtcclxuICAgICAgICAgICAgaWYobmV3VmFsdWUgPT09IG51bGwpe1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHZhbHVlXHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3VmFsdWVcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgIH0gXHJcblxyXG4gICAgICAgIHRyeSB7ICAgXHJcbiAgICAgICAgICAgIGF3YWl0IGF1dGguY2hlY2soKVxyXG4gICAgICAgICAgICBwcm9jLnN0YXRzX3Byb2MgPSBjaGVja1ZhbHVlKG5ld1N0YXRzLCBwcm9jLnN0YXRzX3Byb2MpOyAgXHJcbiAgICAgICAgICAgIHByb2Muc3RhdHNfcGF5ID0gY2hlY2tWYWx1ZShuZXdQYXltZW50LCBwcm9jLnN0YXRzX3BheSk7XHJcbiAgICAgICAgICAgIHByb2MuZGF0ZV9wYWcgPSBjaGVja1ZhbHVlKG5ld0RhdGUsIHByb2MuZGF0ZV9wYWcpO1xyXG5cclxuICAgICAgICAgICAgYXdhaXQgcHJvYz8uc2F2ZSgpXHJcblxyXG4gICAgICAgICAgICByZXR1cm57XHJcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkVkaXRhZG8gY29tIFN1Y2Vzc28hXCIsXHJcbiAgICAgICAgICAgICAgICBkYXRhOiBuZXdTdGF0c1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgICAgICAgICAgcmV0dXJue1xyXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogXCJGYWxob3VcIlxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIHB1YmxpYyBhc3luYyBnZXRBbGwoIHthdXRoLCByZXF1ZXN0IH0pe1xyXG5cclxuICAgICAgICBjb25zdCBjaGVjayA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdXRoZW50aWNhdGUoKTtcclxuXHJcblxyXG4gICAgICAgIGlmKGNoZWNrKXtcclxuICAgICAgICAgICAgcmV0dXJuIFByb2MuYWxsKClcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICByZXR1cm4gXCJOw6NvIGF1dG9yaXphZG8uXCJcclxuICAgICAgICB9XHJcblxyXG4gICAgfVxyXG5cclxuXHJcbn1cclxuIl19