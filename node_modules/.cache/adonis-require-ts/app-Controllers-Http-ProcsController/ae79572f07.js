"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Proc_1 = __importDefault(global[Symbol.for('ioc.use')]("App/Models/Proc"));
class ProcsController {
    async create({ request, response, auth }) {
        const proc = new Proc_1.default();
        const check = await auth.use('api').authenticate();
        if (check) {
            proc.clinica = request.input('clinica');
            proc.convenio = request.input('convenio');
            proc.nome_paciente = request.input('nome_paciente');
            proc.nome_proc = request.input('nome_proc');
            proc.valor_repasse = request.input('valor_repasse');
            proc.quantidade = request.input('quantidade');
            proc.valor_auxiliar = request.input('valor_auxiliar');
            proc.valor_proc = request.input('valor_proc');
            proc.stats_proc = request.input('stats_proc');
            proc.stats_pay = request.input('stats_pay');
            proc.date_proc = request.input('date_proc');
            proc.users_id = request.input('id');
            await proc.save();
        }
        else {
            return "Nao deu";
        }
    }
    async editDados({ auth, request, response }) {
        const proc = await Proc_1.default.findOrFail(request.input("id"));
        const newStats = request.input("newStats");
        const newPayment = request.input("newPayment");
        const checkValue = (newValue, value) => {
            if (newValue === null) {
                return value;
            }
            else {
                return newValue;
            }
        };
        try {
            await auth.check();
            proc.stats_proc = checkValue(newStats, proc.stats_proc);
            proc.stats_pay = checkValue(newPayment, proc.stats_pay);
            await proc?.save();
            return {
                message: "Editado com Sucesso!",
                data: newStats
            };
        }
        catch (error) {
            return {
                message: "Falhou"
            };
        }
    }
}
exports.default = ProcsController;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiUHJvY3NDb250cm9sbGVyLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiUHJvY3NDb250cm9sbGVyLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsaUZBQWtDO0FBSWxDLE1BQXFCLGVBQWU7SUFHekIsS0FBSyxDQUFDLE1BQU0sQ0FBRSxFQUFDLE9BQU8sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFzQjtRQUVuRSxNQUFNLElBQUksR0FBRyxJQUFJLGNBQUksRUFBRSxDQUFDO1FBRXhCLE1BQU0sS0FBSyxHQUFHLE1BQU0sSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLENBQUMsQ0FBQyxZQUFZLEVBQUUsQ0FBQTtRQUVsRCxJQUFHLEtBQUssRUFBQztZQUNMLElBQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQTtZQUN2QyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7WUFDekMsSUFBSSxDQUFDLGFBQWEsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxDQUFBO1lBQ25ELElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUMzQyxJQUFJLENBQUMsYUFBYSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsZUFBZSxDQUFDLENBQUE7WUFDbkQsSUFBSSxDQUFDLFVBQVUsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFlBQVksQ0FBQyxDQUFBO1lBQzdDLElBQUksQ0FBQyxjQUFjLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxDQUFBO1lBQ3JELElBQUksQ0FBQyxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtZQUM3QyxJQUFJLENBQUMsVUFBVSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsWUFBWSxDQUFDLENBQUE7WUFDN0MsSUFBSSxDQUFDLFNBQVMsR0FBRyxPQUFPLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQyxDQUFBO1lBQzNDLElBQUksQ0FBQyxTQUFTLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxXQUFXLENBQUMsQ0FBQTtZQUMzQyxJQUFJLENBQUMsUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUE7WUFFbkMsTUFBTSxJQUFJLENBQUMsSUFBSSxFQUFFLENBQUE7U0FDcEI7YUFBTTtZQUNILE9BQU8sU0FBUyxDQUFBO1NBQ25CO0lBQUEsQ0FBQztJQUdLLEtBQUssQ0FBQyxTQUFTLENBQUUsRUFBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRTtRQUU5QyxNQUFNLElBQUksR0FBRyxNQUFNLGNBQUksQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFBO1FBRXZELE1BQU0sUUFBUSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsVUFBVSxDQUFDLENBQUE7UUFDMUMsTUFBTSxVQUFVLEdBQUcsT0FBTyxDQUFDLEtBQUssQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUc5QyxNQUFNLFVBQVUsR0FBRyxDQUFDLFFBQWEsRUFBRSxLQUFVLEVBQUUsRUFBRTtZQUM3QyxJQUFHLFFBQVEsS0FBSyxJQUFJLEVBQUM7Z0JBQ2pCLE9BQU8sS0FBSyxDQUFBO2FBQ2Y7aUJBQU07Z0JBQ0gsT0FBTyxRQUFRLENBQUE7YUFDbEI7UUFDTCxDQUFDLENBQUE7UUFFRCxJQUFJO1lBQ0EsTUFBTSxJQUFJLENBQUMsS0FBSyxFQUFFLENBQUE7WUFDbEIsSUFBSSxDQUFDLFVBQVUsR0FBRyxVQUFVLENBQUMsUUFBUSxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztZQUN4RCxJQUFJLENBQUMsU0FBUyxHQUFHLFVBQVUsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1lBQ3hELE1BQU0sSUFBSSxFQUFFLElBQUksRUFBRSxDQUFBO1lBRWxCLE9BQU07Z0JBQ0YsT0FBTyxFQUFFLHNCQUFzQjtnQkFDL0IsSUFBSSxFQUFFLFFBQVE7YUFDakIsQ0FBQTtTQUNKO1FBQUMsT0FBTyxLQUFLLEVBQUU7WUFDWixPQUFNO2dCQUNGLE9BQU8sRUFBRSxRQUFRO2FBQ3BCLENBQUE7U0FDSjtJQUNMLENBQUM7Q0FHSjtBQS9ERCxrQ0ErREMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7IEh0dHBDb250ZXh0Q29udHJhY3QgfSBmcm9tICdAaW9jOkFkb25pcy9Db3JlL0h0dHBDb250ZXh0J1xuXG5pbXBvcnQgUHJvYyBmcm9tIFwiQXBwL01vZGVscy9Qcm9jXCJcbmltcG9ydCBVc2VyIGZyb20gJ0FwcC9Nb2RlbHMvVXNlcic7XG5cblxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUHJvY3NDb250cm9sbGVyIHtcblxuXG4gICAgcHVibGljIGFzeW5jIGNyZWF0ZSgge3JlcXVlc3QsIHJlc3BvbnNlLCBhdXRofTogSHR0cENvbnRleHRDb250cmFjdCkge1xuXG4gICAgY29uc3QgcHJvYyA9IG5ldyBQcm9jKCk7XG5cbiAgICBjb25zdCBjaGVjayA9IGF3YWl0IGF1dGgudXNlKCdhcGknKS5hdXRoZW50aWNhdGUoKVxuXG4gICAgaWYoY2hlY2spe1xuICAgICAgICBwcm9jLmNsaW5pY2EgPSByZXF1ZXN0LmlucHV0KCdjbGluaWNhJylcbiAgICAgICAgcHJvYy5jb252ZW5pbyA9IHJlcXVlc3QuaW5wdXQoJ2NvbnZlbmlvJylcbiAgICAgICAgcHJvYy5ub21lX3BhY2llbnRlID0gcmVxdWVzdC5pbnB1dCgnbm9tZV9wYWNpZW50ZScpXG4gICAgICAgIHByb2Mubm9tZV9wcm9jID0gcmVxdWVzdC5pbnB1dCgnbm9tZV9wcm9jJylcbiAgICAgICAgcHJvYy52YWxvcl9yZXBhc3NlID0gcmVxdWVzdC5pbnB1dCgndmFsb3JfcmVwYXNzZScpXG4gICAgICAgIHByb2MucXVhbnRpZGFkZSA9IHJlcXVlc3QuaW5wdXQoJ3F1YW50aWRhZGUnKVxuICAgICAgICBwcm9jLnZhbG9yX2F1eGlsaWFyID0gcmVxdWVzdC5pbnB1dCgndmFsb3JfYXV4aWxpYXInKVxuICAgICAgICBwcm9jLnZhbG9yX3Byb2MgPSByZXF1ZXN0LmlucHV0KCd2YWxvcl9wcm9jJylcbiAgICAgICAgcHJvYy5zdGF0c19wcm9jID0gcmVxdWVzdC5pbnB1dCgnc3RhdHNfcHJvYycpXG4gICAgICAgIHByb2Muc3RhdHNfcGF5ID0gcmVxdWVzdC5pbnB1dCgnc3RhdHNfcGF5JylcbiAgICAgICAgcHJvYy5kYXRlX3Byb2MgPSByZXF1ZXN0LmlucHV0KCdkYXRlX3Byb2MnKVxuICAgICAgICBwcm9jLnVzZXJzX2lkID0gcmVxdWVzdC5pbnB1dCgnaWQnKVxuICAgICAgICBcbiAgICAgICAgYXdhaXQgcHJvYy5zYXZlKClcbiAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gXCJOYW8gZGV1XCJcbiAgICB9fVxuXG5cbiAgICBwdWJsaWMgYXN5bmMgZWRpdERhZG9zKCB7YXV0aCwgcmVxdWVzdCwgcmVzcG9uc2UgfSl7XG5cbiAgICAgICAgY29uc3QgcHJvYyA9IGF3YWl0IFByb2MuZmluZE9yRmFpbChyZXF1ZXN0LmlucHV0KFwiaWRcIikpXG5cbiAgICAgICAgY29uc3QgbmV3U3RhdHMgPSByZXF1ZXN0LmlucHV0KFwibmV3U3RhdHNcIilcbiAgICAgICAgY29uc3QgbmV3UGF5bWVudCA9IHJlcXVlc3QuaW5wdXQoXCJuZXdQYXltZW50XCIpXG5cblxuICAgICAgICBjb25zdCBjaGVja1ZhbHVlID0gKG5ld1ZhbHVlOiBhbnksIHZhbHVlOiBhbnkpID0+IHtcbiAgICAgICAgICAgIGlmKG5ld1ZhbHVlID09PSBudWxsKXtcbiAgICAgICAgICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1ZhbHVlXG4gICAgICAgICAgICB9XG4gICAgICAgIH0gXG5cbiAgICAgICAgdHJ5IHsgICBcbiAgICAgICAgICAgIGF3YWl0IGF1dGguY2hlY2soKVxuICAgICAgICAgICAgcHJvYy5zdGF0c19wcm9jID0gY2hlY2tWYWx1ZShuZXdTdGF0cywgcHJvYy5zdGF0c19wcm9jKTsgIFxuICAgICAgICAgICAgcHJvYy5zdGF0c19wYXkgPSBjaGVja1ZhbHVlKG5ld1BheW1lbnQsIHByb2Muc3RhdHNfcGF5KTsgIFxuICAgICAgICAgICAgYXdhaXQgcHJvYz8uc2F2ZSgpXG5cbiAgICAgICAgICAgIHJldHVybntcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkVkaXRhZG8gY29tIFN1Y2Vzc28hXCIsXG4gICAgICAgICAgICAgICAgZGF0YTogbmV3U3RhdHNcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICAgIHJldHVybntcbiAgICAgICAgICAgICAgICBtZXNzYWdlOiBcIkZhbGhvdVwiXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9XG5cblxufVxuIl19