"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const Route_1 = __importDefault(global[Symbol.for('ioc.use')]("Adonis/Core/Route"));
Route_1.default.group(() => {
    Route_1.default.post('/register', 'UsersController.create').as('user.create');
    Route_1.default.post('/login', 'UsersController.login').as('user.login');
    Route_1.default.get('/getalldoctors', 'UsersController.getAllDoctors').as('user.getall');
    Route_1.default.post('/takedoctors', 'UsersController.takeDocDados').as('user.take');
    Route_1.default.get('/checkroute', 'UsersController.checkRoute').as('user.checkroute');
    Route_1.default.get('/deleteuser', 'UsersController.deleteUser').as('user.delete');
    Route_1.default.post('/registerclinic', 'ClinicsController.create').as('clinic.create');
    Route_1.default.get('/getallclinics', 'ClinicsController.getAllClinics').as('clinic.getAll');
    Route_1.default.post('/proc', 'ProcsController.create').as('proc.create');
    Route_1.default.post('/procedit', 'ProcsController.editDados').as('proc.edit');
    Route_1.default.post('/proceditdados', 'ProcsController.getinfoDados').as('proc.editDados');
    Route_1.default.post('/procAll', 'ProcsController.getAll').as('proc.all');
    Route_1.default.post('/createName', 'ProcNamesController.createProcName').as('proc.name');
    Route_1.default.get('/getNames', 'ProcNamesController.procNames').as('proc.allNames');
    Route_1.default.post('/createConvName', 'ConvNamesController.createConvName').as('conv.name');
    Route_1.default.get('/getConvNames', 'ConvNamesController.convNames').as('conv.allNames');
}).prefix('api');
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicm91dGVzLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsicm91dGVzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsb0ZBQTBDO0FBRTFDLGVBQUssQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO0lBSWYsZUFBSyxDQUFDLElBQUksQ0FBQyxXQUFXLEVBQUUsd0JBQXdCLENBQUMsQ0FBQyxFQUFFLENBQUMsYUFBYSxDQUFDLENBQUE7SUFFbkUsZUFBSyxDQUFDLElBQUksQ0FBQyxRQUFRLEVBQUUsdUJBQXVCLENBQUMsQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLENBQUE7SUFFOUQsZUFBSyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUU5RSxlQUFLLENBQUMsSUFBSSxDQUFDLGNBQWMsRUFBRSw4QkFBOEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUUxRSxlQUFLLENBQUMsR0FBRyxDQUFDLGFBQWEsRUFBRSw0QkFBNEIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxpQkFBaUIsQ0FBQyxDQUFBO0lBRTVFLGVBQUssQ0FBQyxHQUFHLENBQUMsYUFBYSxFQUFFLDRCQUE0QixDQUFDLENBQUMsRUFBRSxDQUFDLGFBQWEsQ0FBQyxDQUFBO0lBSXhFLGVBQUssQ0FBQyxJQUFJLENBQUMsaUJBQWlCLEVBQUUsMEJBQTBCLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFN0UsZUFBSyxDQUFDLEdBQUcsQ0FBQyxnQkFBZ0IsRUFBRSxpQ0FBaUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtJQUlsRixlQUFLLENBQUMsSUFBSSxDQUFDLE9BQU8sRUFBRSx3QkFBd0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxhQUFhLENBQUMsQ0FBQTtJQUUvRCxlQUFLLENBQUMsSUFBSSxDQUFDLFdBQVcsRUFBRSwyQkFBMkIsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUVwRSxlQUFLLENBQUMsSUFBSSxDQUFDLGdCQUFnQixFQUFFLDhCQUE4QixDQUFDLENBQUMsRUFBRSxDQUFDLGdCQUFnQixDQUFDLENBQUE7SUFFakYsZUFBSyxDQUFDLElBQUksQ0FBQyxVQUFVLEVBQUUsd0JBQXdCLENBQUMsQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLENBQUE7SUFFL0QsZUFBSyxDQUFDLElBQUksQ0FBQyxhQUFhLEVBQUUsb0NBQW9DLENBQUMsQ0FBQyxFQUFFLENBQUMsV0FBVyxDQUFDLENBQUE7SUFFL0UsZUFBSyxDQUFDLEdBQUcsQ0FBQyxXQUFXLEVBQUUsK0JBQStCLENBQUMsQ0FBQyxFQUFFLENBQUMsZUFBZSxDQUFDLENBQUE7SUFFM0UsZUFBSyxDQUFDLElBQUksQ0FBQyxpQkFBaUIsRUFBRSxvQ0FBb0MsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxXQUFXLENBQUMsQ0FBQTtJQUVuRixlQUFLLENBQUMsR0FBRyxDQUFDLGVBQWUsRUFBRSwrQkFBK0IsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxlQUFlLENBQUMsQ0FBQTtBQUkvRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUEiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgUm91dGUgZnJvbSAnQGlvYzpBZG9uaXMvQ29yZS9Sb3V0ZSdcclxuXHJcblJvdXRlLmdyb3VwKCgpID0+IHtcclxuXHJcblxyXG4gIC8vVXNlcnNcclxuICBSb3V0ZS5wb3N0KCcvcmVnaXN0ZXInLCAnVXNlcnNDb250cm9sbGVyLmNyZWF0ZScpLmFzKCd1c2VyLmNyZWF0ZScpXHJcbiAgXHJcbiAgUm91dGUucG9zdCgnL2xvZ2luJywgJ1VzZXJzQ29udHJvbGxlci5sb2dpbicpLmFzKCd1c2VyLmxvZ2luJylcclxuICBcclxuICBSb3V0ZS5nZXQoJy9nZXRhbGxkb2N0b3JzJywgJ1VzZXJzQ29udHJvbGxlci5nZXRBbGxEb2N0b3JzJykuYXMoJ3VzZXIuZ2V0YWxsJylcclxuXHJcbiAgUm91dGUucG9zdCgnL3Rha2Vkb2N0b3JzJywgJ1VzZXJzQ29udHJvbGxlci50YWtlRG9jRGFkb3MnKS5hcygndXNlci50YWtlJylcclxuXHJcbiAgUm91dGUuZ2V0KCcvY2hlY2tyb3V0ZScsICdVc2Vyc0NvbnRyb2xsZXIuY2hlY2tSb3V0ZScpLmFzKCd1c2VyLmNoZWNrcm91dGUnKVxyXG5cclxuICBSb3V0ZS5nZXQoJy9kZWxldGV1c2VyJywgJ1VzZXJzQ29udHJvbGxlci5kZWxldGVVc2VyJykuYXMoJ3VzZXIuZGVsZXRlJylcclxuXHJcbiAgXHJcbiAgLy9DbGluaWNcclxuICBSb3V0ZS5wb3N0KCcvcmVnaXN0ZXJjbGluaWMnLCAnQ2xpbmljc0NvbnRyb2xsZXIuY3JlYXRlJykuYXMoJ2NsaW5pYy5jcmVhdGUnKVxyXG4gIFxyXG4gIFJvdXRlLmdldCgnL2dldGFsbGNsaW5pY3MnLCAnQ2xpbmljc0NvbnRyb2xsZXIuZ2V0QWxsQ2xpbmljcycpLmFzKCdjbGluaWMuZ2V0QWxsJylcclxuXHJcblxyXG4gIC8vUHJvY1xyXG4gIFJvdXRlLnBvc3QoJy9wcm9jJywgJ1Byb2NzQ29udHJvbGxlci5jcmVhdGUnKS5hcygncHJvYy5jcmVhdGUnKVxyXG5cclxuICBSb3V0ZS5wb3N0KCcvcHJvY2VkaXQnLCAnUHJvY3NDb250cm9sbGVyLmVkaXREYWRvcycpLmFzKCdwcm9jLmVkaXQnKVxyXG4gIFxyXG4gIFJvdXRlLnBvc3QoJy9wcm9jZWRpdGRhZG9zJywgJ1Byb2NzQ29udHJvbGxlci5nZXRpbmZvRGFkb3MnKS5hcygncHJvYy5lZGl0RGFkb3MnKVxyXG5cclxuICBSb3V0ZS5wb3N0KCcvcHJvY0FsbCcsICdQcm9jc0NvbnRyb2xsZXIuZ2V0QWxsJykuYXMoJ3Byb2MuYWxsJylcclxuXHJcbiAgUm91dGUucG9zdCgnL2NyZWF0ZU5hbWUnLCAnUHJvY05hbWVzQ29udHJvbGxlci5jcmVhdGVQcm9jTmFtZScpLmFzKCdwcm9jLm5hbWUnKVxyXG5cclxuICBSb3V0ZS5nZXQoJy9nZXROYW1lcycsICdQcm9jTmFtZXNDb250cm9sbGVyLnByb2NOYW1lcycpLmFzKCdwcm9jLmFsbE5hbWVzJylcclxuXHJcbiAgUm91dGUucG9zdCgnL2NyZWF0ZUNvbnZOYW1lJywgJ0NvbnZOYW1lc0NvbnRyb2xsZXIuY3JlYXRlQ29udk5hbWUnKS5hcygnY29udi5uYW1lJylcclxuXHJcbiAgUm91dGUuZ2V0KCcvZ2V0Q29udk5hbWVzJywgJ0NvbnZOYW1lc0NvbnRyb2xsZXIuY29udk5hbWVzJykuYXMoJ2NvbnYuYWxsTmFtZXMnKVxyXG5cclxuXHJcbiAgXHJcbiAgfSkucHJlZml4KCdhcGknKVxyXG4gICJdfQ==